h1. Cashboard-js

This project is the official Javascript wrapper for the "Cashboard API":http://api.cashboardapp.com created and maintained by "Subimage LLC":http://www.subimage.com.

"Cashboard":http://www.getcashboard.com is an online service that allows you to track time, create estimates, invoice your clients, and collect payments via credit cards or PayPal.

Cashboard-js uses the JSON data format to speak to the Cashboard API.

h2. Purpose

The aim of this project is to provide a quick and simple way to use the Cashboard API from javascript widgets, mobile devices, and other lightweight clients. We will most likely be using it for any new Apple Dashboard Widgets or small client apps we develop in house.

Cashboard-js doesn't leverage a framework like "prototype.js":http://www.prototypejs.org/, "jquery":http://jquery.com/, or "mootools":http://mootools.net/ so you can hopefully mix and match it with your favorite framework of choice.

h2. Usage

All methods that go across the wire (list, create, update, destroy) can be passed callback functions. These functions are run at the appropriate time in the request lifecycle as you'd expect.

Callbacks will be returned either single or multiple CashboardObjects inside an array, depending on the resource type you're interacting with.

h3. Callbacks
* onLoading
* onSuccess
* onFailure


h3. Simple LIST Usage

bc.. CASHBOARD.authenticate('my_subdomain', 'my_api_key');
var employees = CASHBOARD.employees.list({
 onLoading: function() {
   // Your loading function here
 },
 onSuccess: function(cb_employees) {
   // Do something with employees here
 },
 onFailure: function(code, message) {
   alert("API error: " + code + " - " + message);
 }
});

p. 

h3. Simple CREATE Usage

bc.. CASHBOARD.authenticate('my_subdomain', 'my_api_key');
CASHBOARD.employees.create(
 {
   first_name: 'Bob',
   last_name: 'Builder',
   email_address: 'bob@builder.com'
 },
 {
   onLoading: yourLoaderFunction,
   onSuccess: function(created_employee){
     // do something with the employee here
   },
   onFailure: referenceToFailureFunction
 }
);

p. 

h3. Demo

For a more extended use scenario, check out the /example folder.

You can open the demo.html file in Safari and poke around using the API. Check out demo.js for a very quick example of interacting with the API.

You could probably even use demo.js as a base to develop Webkit based widgets for your own personal use. Right now it only works in Safari (and I'm guessing Google Chrome). Firefox will NOT work with the demo, as it doesn't allow HTTPS requests via XMLHttpRequest from your local machine to the Cashboard server.

h2. Roadmap

I'd like to get around to this sooner or later.

# Some sort of documentation besides the code files
# A testing framework of some sort and actual unit tests :)
# Automated build script that combines all JS files and minifies them

h2. Links

* "Cashboard API Documentation":http://api.cashboardapp.com
* "Cashboard API Forum":http://forum.getcashboard.com/forums/7
* "Source code for Cashboard-js":http://github.com/subimage/cashboard-js

h2. License

Cashboard-js is released under the MIT License.